<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>装饰器模式 on Gra55&#39;s Blog</title>
    <link>/tags/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 装饰器模式 on Gra55&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 16 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>设计模式 # 结构型 # 装饰器模式</title>
      <link>/blog/2020/architecture/decorator-pattern/</link>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/2020/architecture/decorator-pattern/</guid>
      <description>结构型设计模式主要用于描述对象之间的组合，通过对象间的组合来完成特定功能。
 0x00 模式概述 装饰器模式会动态的给一个对象添加新功能，就增加功能来说，装饰器模式比子类化更灵活（合成复用原则）。
0x01 场景 当需要给一个对象增加新功能时，又不想使用继承，可以考虑使用装饰器模式实现。
0x02 解决方案 装饰器模式通过将对象包装在装饰器类内部来动态更改对象的行为。
0x03 总结 装饰器模式很简单，大多数脚本语言已经在语言层面实现了该模式。
 参考：
📌 设计模式（45种）
📌 Design patterns for humans 中文版</description>
    </item>
    
  </channel>
</rss>